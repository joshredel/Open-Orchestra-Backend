<?php

namespace org\cim\proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class orgcimScoreProxy extends \org\cim\Score implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setMusicPiece($musicPiece)
    {
        $this->_load();
        return parent::setMusicPiece($musicPiece);
    }

    public function getMusicPiece()
    {
        $this->_load();
        return parent::getMusicPiece();
    }

    public function setInstrument($instrument)
    {
        $this->_load();
        return parent::setInstrument($instrument);
    }

    public function getInstrument()
    {
        $this->_load();
        return parent::getInstrument();
    }

    public function setDefaultSetting($setting)
    {
        $this->_load();
        return parent::setDefaultSetting($setting);
    }

    public function getDefaultSetting()
    {
        $this->_load();
        return parent::getDefaultSetting();
    }

    public function addMixer($mixer)
    {
        $this->_load();
        return parent::addMixer($mixer);
    }

    public function getMixers()
    {
        $this->_load();
        return parent::getMixers();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'fileLocation', 'xmlLocation', 'masterServerLocation', 'conversionServerLocation', 'stream', 'id', 'instrument', 'defaultSetting', 'mixers', 'musicPiece');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}